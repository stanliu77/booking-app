generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  PROVIDER
}

model User {
  id                   String        @id @default(cuid()) 
  clerkId              String        @unique              
  email                String        @unique
  role                  Role?
  createdAt            DateTime      @default(now())
  appointmentsCreated  Appointment[] @relation("UserAppointments")
  appointmentsReceived Appointment[] @relation("ProviderAppointments")
  services             Service[]
  reviews              Review[]
}


model Appointment {
  id         String            @id @default(cuid())
  userId     String
  providerId String
  serviceId  String
  datetime   DateTime
  status     AppointmentStatus @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  user     User     @relation("UserAppointments", fields: [userId], references: [id])
  provider User     @relation("ProviderAppointments", fields: [providerId], references: [id])
  service  Service @relation("ServiceAppointments", fields: [serviceId], references: [id])
  isPaid Boolean @default(false)
  isCompleted Boolean @default(false)
}

enum AppointmentStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  duration    Int // in minutes
  imageUrl    String?
  rating      Float? // optional average rating
  providerId  String
  createdAt   DateTime @default(now())

  provider     User          @relation(fields: [providerId], references: [id])
  appointments Appointment[] @relation("ServiceAppointments")
  timeSlots    TimeSlot[]
  reviews Review[]
}

model TimeSlot {
  id        String   @id @default(cuid())
  serviceId String
  start     DateTime
  end       DateTime

  service Service @relation(fields: [serviceId], references: [id])
}

model Review {
  id          String   @id @default(cuid())
  
  user        User     @relation(fields: [userId],references: [id])
  userId      String

  service     Service  @relation(fields: [serviceId], references: [id])
  serviceId   String

  rating      Int
  comment     String
  createdAt   DateTime @default(now())
}

